// 逆向代码
// 加密目标位置
// JSON['parse'](_0xa60097['a']['decipher'](_0x3bb7ad[_0x430ddf(0x1f7, 'JJcn')]['result']))

// 目标逆向函数：_0xa60097['a']['decipher']
// function _0x3ad8ba(_0x2a66df) {
//     return _0x1372a9(_0x230351(_0x43f8fa(_0x2a66df)));
// }
// _0x1372a9, _0x230351, _0x43f8fa

res = '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'


function _0x43f8fa(_0x4f03f6) {
    // Buffer.from(res1, 'base64').toString('binary');  //atob  base64解码
    for (var _0xa1047e = Buffer.from(_0x4f03f6, 'base64').toString('binary'), _0x186e94 = new Int8Array(_0xa1047e['length']), _0x5806a5 = 0x0; _0x5806a5 < _0xa1047e['length']; _0x5806a5++)
        _0x186e94[_0x5806a5] = _0xa1047e['charCodeAt'](_0x5806a5);
    return _0x186e94;
}
// console.log(_0x43f8fa(res));

function _0x230351(_0x583989) {
    for (var _0x4d2087 = [-0x6f, 0x34, 0x5b, 0x41, -0x41, 0x74, 0x77, 0x6a, -0x79, -0x52, -0x5, 0x50, 0x33, 0x61, 0x44, -0x53, -0x70, -0x33, 0x17, -0x2e, -0x22, -0x72, -0x37, -0xb, -0x7f, 0x5a, 0x21, 0x16, -0x1f, 0x32, -0x11, 0x14, -0x2c, 0xf, -0x5e, -0x7b, 0x76, -0x17, -0x3d, 0x72, 0x47, -0x68, -0x7e, -0x75, -0x51, -0x36, -0x12, -0x6e, -0x4, -0x5f, -0x5b, 0x5e, -0x50, -0xe, 0x78, 0x69, 0x55, 0x68, -0x56, -0x6c, 0x43, 0x19, 0x65, 0x6c, 0x10, -0x69, 0x6f, -0xa, 0x75, -0x49, 0x4d, 0x59, -0x1d, -0x62, -0x44, 0x70, 0x6b, -0x1, 0x56, 0x79, 0x58, -0x65, -0x7c, 0x45, -0x1e, -0x8, -0x71, -0x4a, -0x76, 0x39, -0x19, 0xc, -0x73, -0x6a, 0x5f, 0x7f, 0x54, 0x7c, -0x66, -0x1c, 0x49, 0x2b, -0x3c, 0x1c, 0x2e, 0x73, 0x1e, 0x7a, -0x4b, 0x7d, -0x43, -0x4d, 0x3, -0x7, -0x35, -0xd, 0x35, 0x4e, -0x48, 0x1, 0xb, -0x47, -0x27, -0x4f, -0x3, 0x13, 0x29, 0x7e, -0x2b, -0x7d, -0x1b, 0x22, 0x3f, 0x8, 0x48, -0x23, -0x29, -0x3f, 0x3c, -0x18, 0x66, 0x2f, -0x77, -0x67, -0x16, 0x2d, 0x3b, 0x40, -0x60, 0x31, 0x53, -0x6b, -0x78, -0x39, -0x46, 0x0, -0x26, -0x54, -0x28, 0x18, 0xe, 0x30, 0x1d, 0x2c, -0x24, -0x2f, 0x38, -0x5c, 0x26, 0x25, 0x4, -0x32, 0x67, 0xa, -0x59, 0x37, 0x71, -0x1a, 0x6e, 0x36, 0x24, -0x14, -0x4e, -0xc, -0x74, 0x46, -0x25, 0x5, -0x3e, -0x4c, -0x30, -0x40, 0x4f, 0x64, 0x28, 0x6, -0x3a, -0x5a, -0x13, -0x9, 0x27, 0x5d, -0x63, 0x15, 0x7, 0x1a, -0x2, 0x1b, -0x2d, 0x51, 0x3a, -0x7a, 0x4c, -0x42, 0x2, 0x5c, -0x2a, 0x62, -0x10, 0x9, 0x3d, 0x3e, -0xf, 0x63, -0x15, 0x1f, -0x38, 0x57, 0x11, -0x34, -0x45, -0x21, -0x3b, -0x55, 0x42, 0x4a, 0x12, -0x5d, -0x80, -0x57, -0x20, 0x2a, 0x20, -0x58, 0x6d, 0x60, 0xd, -0x6, 0x4b, -0x64, -0x31, 0x23, -0x61, 0x52, -0x6d, 0x7b], _0x525612 = 0x0, _0xfdd5b7 = 0x0, _0x3f51a8 = 0x0, _0x41bbf1 = new Array(), _0x572991 = 0x0; _0x572991 < _0x583989['length']; _0x572991++) {
        _0x525612 = _0x525612 + 0x1 & 0xff,
        _0xfdd5b7 = (0xff & _0x4d2087[_0x525612]) + _0xfdd5b7 & 0xff;
        var _0xc16be2 = _0x4d2087[_0x525612];
        _0x4d2087[_0x525612] = _0x4d2087[_0xfdd5b7],
        _0x4d2087[_0xfdd5b7] = _0xc16be2,
        _0x3f51a8 = (0xff & _0x4d2087[_0x525612]) + (0xff & _0x4d2087[_0xfdd5b7]) & 0xff,
        _0x41bbf1['push'](_0x583989[_0x572991] ^ _0x4d2087[_0x3f51a8]);
    }
    return _0x41bbf1;
}

// console.log(_0x230351(_0x43f8fa(res)));

function _0x1372a9(_0x5c4f9d) {
    // var _0x5b118e = _0x5c81;  // 没必要kou，下面用来求方法字符串，直接还原
    for (var _0xf6e638, _0x2f95a8, _0x17f332 = '', _0x46372e = 0x0; _0x46372e < _0x5c4f9d['length']; )
        _0xf6e638 = _0x5c4f9d[_0x46372e],
        _0x2f95a8 = 0x0,
        _0xf6e638 >>> 0x7 === 0x0 ? (_0x17f332 += String['fromCharCode'](_0x5c4f9d[_0x46372e]),
        _0x46372e += 0x1) : 0xfc === (0xfc & _0xf6e638) ? (_0x2f95a8 = (0x3 & _0x5c4f9d[_0x46372e]) << 0x1e,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x1]) << 0x18,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x2]) << 0x12,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x3]) << 0xc,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x4]) << 0x6,
        _0x2f95a8 |= 0x3f & _0x5c4f9d[_0x46372e + 0x5],
        _0x17f332 += String['fromCharCode'](_0x2f95a8),
        _0x46372e += 0x6) : 0xf8 === (0xf8 & _0xf6e638) ? (_0x2f95a8 = (0x7 & _0x5c4f9d[_0x46372e]) << 0x18,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x1]) << 0x12,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x2]) << 0xc,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x3]) << 0x6,
        _0x2f95a8 |= 0x3f & _0x5c4f9d[_0x46372e + 0x4],
        _0x17f332 += String['fromCharCode'](_0x2f95a8),
        _0x46372e += 0x5) : 0xf0 === (0xf0 & _0xf6e638) ? (_0x2f95a8 = (0xf & _0x5c4f9d[_0x46372e]) << 0x12,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x1]) << 0xc,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x2]) << 0x6,
        _0x2f95a8 |= 0x3f & _0x5c4f9d[_0x46372e + 0x3],
        _0x17f332 += String['fromCharCode'](_0x2f95a8),
        _0x46372e += 0x4) : 0xe0 === (0xe0 & _0xf6e638) ? (_0x2f95a8 = (0x1f & _0x5c4f9d[_0x46372e]) << 0xc,
        _0x2f95a8 |= (0x3f & _0x5c4f9d[_0x46372e + 0x1]) << 0x6,
        _0x2f95a8 |= 0x3f & _0x5c4f9d[_0x46372e + 0x2],
        _0x17f332 += String['fromCharCode'](_0x2f95a8),
        _0x46372e += 0x3) : 0xc0 === (0xc0 & _0xf6e638) ? (_0x2f95a8 = (0x3f & _0x5c4f9d[_0x46372e]) << 0x6,
        _0x2f95a8 |= 0x3f & _0x5c4f9d[_0x46372e + 0x1],
        _0x17f332 += String['fromCharCode'](_0x2f95a8),
        _0x46372e += 0x2) : (_0x17f332 += String['fromCharCode'](_0x5c4f9d[_0x46372e]),
        _0x46372e += 0x1);
    return _0x17f332;
}
console.log(_0x1372a9(_0x230351(_0x43f8fa(res))));